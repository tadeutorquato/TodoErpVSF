@page "/"
@inject HttpClient http

<h1>Lista de Tarefas V.1</h1>

Bem vindo a sua nova lista de tarefas.
<hr />

@if (tarefas == null)
{
    <p>Carregando....</p>
}
else if (!tarefas.Any())
{
    <p>Ainda não existem tarefas...</p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Data</th>
            <th>Descricao</th>
            <th class="text-center">Concluida</th>
            <th class="text-center">Ação</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in tarefas)
            {
                <tr>
                    <th>@item.DataCriacao</th>
                    <th>@item.Descricao</th>
                    <th class="text-center"><input type="checkbox" class="form-check-input" @bind="item.Concluida" /></th>
                    <th class="text-center"><button @onclick="@(() => RemoveTarefa(item.ID))"><i class="oi oi-trash"></i></button></th>
                </tr>
            }
        </tbody>
    </table>
}

@if (tarefas != null)
{
    <div class="panel panel-default animated fadeInRight">
        <div class="panel-body">                        
                <div class="col-sm-8">
                    <div class="form-group">
                        <label for="inputTarefa" class="col-form-label">Tarefa&nbsp;</label>
                        <input type="text" id="inputTarefa" class="form-control" placeholder="Informe a tarefa" @bind="novaTarefa" />
                    </div>
                </div>

                <div class="col-sm-4">
                    <div class="form-group">
                        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
                    </div>
                </div>
            
        </div>
    </div>
}

@code{
    protected override async Task OnInitializedAsync()
    {
        tarefas = await http.GetFromJsonAsync<List<Tarefa>>("data/tarefas.json");
    }
    public class Tarefa
    {
        public Guid ID { get; set; }
        public string Descricao { get; set; }
        public bool Concluida { get; set; }
        public DateTime DataCriacao { get; set; }
    }

    private string novaTarefa = "";
    private List<Tarefa> tarefas = new List<Tarefa>();

    protected void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            Tarefa tarefa = new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            };

            //var response = http.PutAsJsonAsync("data/tarefas.json", tarefa);
            //bool returnValue = await response.Content.ReadAsAsync<bool>();
            //if(returnValue){
                tarefas.Add(tarefa);
            //}

            novaTarefa = string.Empty;
        }
    }

    protected void RemoveTarefa(Guid id)
    {
        tarefas.Remove(tarefas.First(x => x.ID == id));
    }
}
